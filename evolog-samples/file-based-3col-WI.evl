#enumeration_predicate_is ids.

enter_input_prompt("Please enter a path to read graphs from: ").
enter_output_prompt("Please enter a path to write calculated colorings for graph ").

write_input_prompt_res(R) : @streamWrite[STDOUT, PROMPT] = R :- enter_input_prompt(PROMPT), &stdout(STDOUT).
usr_input_res(INP) : @streamReadLine[STDIN] = INP :- write_input_prompt_res(success(_)), &stdin(STDIN).

infile(PATH) :- usr_input_res(success(line(PATH))).
infile_open(PATH, HD) : @fileInputStream[PATH] = HD :- infile(PATH).

% Handle file opening error
error(io, MSG) :- infile_open(_, error(MSG)).

% Read all lines from infile 
readline_result(PATH, 0, RES) : @streamReadLine[STREAM] = RES :- infile(PATH), infile_open(PATH, success(stream(STREAM))).
readline_result(PATH, LINE_NO, RES) : @streamReadLine[STREAM] = RES :- 
	infile(PATH), 
	infile_open(PATH, success(stream(STREAM))), 
	readline_result(PATH, PREV_LINE_NO, PREV_LINE_RES), 
	PREV_LINE_RES != success(line(eof)), 
	LINE_NO = PREV_LINE_NO + 1.

% close stream after getting eof
infile_closed(PATH, RES) : @inputStreamClose[STREAM] = RES :- infile(PATH), infile_open(PATH, success(stream(STREAM))), readline_result(PATH, _, ok(eof)).

% Now create a list of content lines
file_lines(PATH, LST) :- LST = #list{line(LINE_NO, LINE) : readline_result(PATH, LINE_NO, success(line(LINE))), LINE != eof}, infile(PATH).

% Parse the string content of individual lines into a DOM-like representation
file_dom(PATH, dom(ELEMENTS, CHILDREN, TEXTS, ATTRIBUTES)) :- 
	file_lines(PATH, LINES), 
	#xml_dom[LINES](ELEMENTS, CHILDREN, TEXTS, ATTRIBUTES).

% Unwrap list elements from module output
dom_element_entry(NAME, ID, TAIL) :- file_dom(_, dom(lst(dom_element(NAME, ID), TAIL), _, _, _)).
dom_element_entry(NAME, ID, TAIL) :- dom_element_entry(_, _, lst(dom_element(NAME, ID), TAIL)).
dom_element(NAME, ID) :- dom_element_entry(NAME, ID, _).
dom_element_child_entry(NAME, ID, CHILD_ID, TAIL) :- file_dom(_,dom(_, lst(dom_element_child(NAME, ID, CHILD_ID), TAIL), _, _)).
dom_element_child_entry(NAME, ID, CHILD_ID, TAIL) :- dom_element_child_entry(_, _, _, lst(dom_element_child(NAME, ID, CHILD_ID), TAIL)).
dom_element_child(NAME, ID, CHILD_ID) :- dom_element_child_entry(NAME, ID, CHILD_ID, _).
dom_element_text_entry(NAME, ID, TEXT, TAIL) :- file_dom(_,dom(_, _, lst(dom_element_text(NAME, ID, TEXT), TAIL), _)).
dom_element_text_entry(NAME, ID, TEXT, TAIL) :- dom_element_text_entry(_, _, _, lst(dom_element_text(NAME, ID, TEXT), TAIL)).
dom_element_text(NAME, ID, TEXT) :- dom_element_text_entry(NAME, ID, TEXT, _).
dom_element_attribute_entry(NAME, ID, ATTR_NAME, ATTR_VALUE, TAIL) :- file_dom(_,dom(_, _, _, lst(dom_element_attribute(NAME, ID, ATTR_NAME, ATTR_VALUE), TAIL))).
dom_element_attribute_entry(NAME, ID, ATTR_NAME, ATTR_VALUE, TAIL) :- dom_element_attribute_entry(_, _, _, lst(dom_element_attribute(NAME, ID, ATTR_NAME, ATTR_VALUE), TAIL)).
dom_element_attribute(NAME, ID, ATTR_NAME, ATTR_VALUE) :- dom_element_attribute_entry(NAME, ID, ATTR_NAME, ATTR_VALUE, _).

% Translate generic DOM-elements into graphs
graph(ID) :- dom_element("graph", ID).
graph_vertex(ID, VERTEX) :- 
	graph(ID), dom_element("graph", ID), dom_element_child("graph", ID, VERTEX_LIST_ID), 
	dom_element("vertices", VERTEX_LIST_ID), dom_element("vertex", VERTEX_ID), dom_element_child("vertices", VERTEX_LIST_ID, VERTEX_ID),
	dom_element_text("vertex", VERTEX_ID, VERTEX).
graph_directedness(ID, DIRECTED) :- 
	graph(ID), dom_element("graph", ID), dom_element_attribute("graph", ID, "directed", DIRECTED).
graph_undirected(ID) :- graph_directedness(ID, "false").
graph_directed(ID) :- graph_directedness(ID, "true").
graph_edge(ID, EDGE) :- 
	graph(ID), graph_vertex(ID, SRC_ID), graph_vertex(ID, TARGET_ID), dom_element("graph", ID), dom_element_child("graph", ID, EDGE_LIST_ID), 
	dom_element("edges", EDGE_LIST_ID), dom_element("edge", EDGE_ID), dom_element_child("edges", EDGE_LIST_ID, EDGE_ID),
	dom_element("source", SRC_ELEM_ID), dom_element_child("edge", EDGE_ID, SRC_ELEM_ID), dom_element_text("source", SRC_ELEM_ID, SRC_ID),
	dom_element("target", TARGET_ELEM_ID), dom_element_child("edge", EDGE_ID, TARGET_ELEM_ID), dom_element_text("target", TARGET_ELEM_ID, TARGET_ID),
	EDGE = e(SRC_ID, TARGET_ID).
graph_edge(ID, e(TARGET, SRC)) :- graph_edge(ID, e(SRC, TARGET)), graph_undirected(ID).	

% Calculate 3-colorings for each parsed graph
graph_threecol(ID, COL) :- 
	graph(ID), 
	VERTEX_LIST = #list{V : graph_vertex(ID, V)}, 
	EDGE_LIST = #list{edge(V1, V2) : graph_edge(ID, e(V1, V2))}, 
	#threecol[VERTEX_LIST, EDGE_LIST](COL).

graph_coloring(GRAPH, COLORING, ID) :- ids(coloring_ids, gcol(GRAPH, COLORING), ID), graph_threecol(GRAPH, COLORING).

% Translate colorings into strings
stringified_coloring_lst(GRAPH, COL_ID, COLSTR_LST) :- 
	graph_coloring(GRAPH, COLS, COL_ID),
	#threecol_to_xml[COLS](COLSTR_LST).
stringified_coloring_entry(GRAPH, COL_ID, COL_STR, TAIL) :-
	stringified_coloring_lst(GRAPH, COL_ID, lst(coloring_xmlstr(COL_STR), TAIL)).
stringified_coloring_entry(GRAPH, COL_ID, COL_STR, TAIL) :-
	stringified_coloring_entry(GRAPH, COL_ID, _, lst(coloring_xmlstr(COL_STR), TAIL)).	
stringified_coloring(GRAPH, COL_ID, COL_STR) :- stringified_coloring_entry(GRAPH, COL_ID, COL_STR, _).

% Stitch individual coloring strings into one string
stringified_coloring_before(GRAPH, COL_ID, COL_ID_AFTER) :-
	stringified_coloring(GRAPH, COL_ID, _),
	stringified_coloring(GRAPH, COL_ID_AFTER, _),
	COL_ID_AFTER > COL_ID.	
stringified_coloring_not_predecessor(GRAPH, COL_ID, COL_ID_AFTER) :-
	stringified_coloring_before(GRAPH, COL_ID, COL_ID_INTM),
	stringified_coloring_before(GRAPH, COL_ID_INTM, COL_ID_AFTER).
stringified_coloring_predecessor(GRAPH, COL_ID, COL_ID_AFTER) :-
	stringified_coloring_before(GRAPH, COL_ID, COL_ID_AFTER),
	not stringified_coloring_not_predecessor(GRAPH, COL_ID, COL_ID_AFTER).
stringified_coloring_has_predecessor(GRAPH, COL_ID) :- 
	stringified_coloring(GRAPH, COL_ID, _), 
	stringified_coloring_predecessor(GRAPH, _, COL_ID).	
stringified_coloring_first(GRAPH, COL_ID) :- 
	stringified_coloring(GRAPH, COL_ID, _), 
	not stringified_coloring_has_predecessor(GRAPH, COL_ID).	
stringified_coloring_has_successor(GRAPH, COL_ID) :- 
	stringified_coloring(GRAPH, COL_ID, _), 
	stringified_coloring_before(GRAPH, COL_ID, _).	
stringified_coloring_last(GRAPH, COL_ID) :-
	stringified_coloring(GRAPH, COL_ID, _),
	not stringified_coloring_has_successor(GRAPH, COL_ID).

xmlstring_upto(GRAPH, STR, COL_ID_FIRST) :-
	&stdlib_string_concat["<colorings>", COLSTR](STR),
	stringified_coloring_first(GRAPH, COL_ID_FIRST),
	stringified_coloring(GRAPH, COL_ID_FIRST, COLSTR).

xmlstring_upto(GRAPH, STR, COL_ID) :-
	stringified_coloring_predecessor(GRAPH, COL_ID_PRED, COL_ID),
	xmlstring_upto(GRAPH, PREV_STR, COL_ID_PRED),
	stringified_coloring(GRAPH, COL_ID, COLSTR),
	&stdlib_string_concat[PREV_STR, COLSTR](STR).

colorings_xmlstring(GRAPH, RESULT_STR) :-
	stringified_coloring_last(GRAPH, COL_ID),
	xmlstring_upto(GRAPH, STR, COL_ID),
	&stdlib_string_concat[STR, "</colorings>"](RESULT_STR).

% Prompt user for a path to which to write the calculated colorings for each graph
write_output_prompt_res(G, R) : @streamWrite[STDOUT, P] = R :- 
	graph(G), enter_output_prompt(PROMPT), 
	&stdlib_string_concat[PROMPT, G](S),
	&stdlib_string_concat[S, ": "](P),
	&stdout(STDOUT).
usr_output_res(G, INP) : @streamReadLine[STDIN] = INP :- write_output_prompt_res(G, success(_)), &stdin(STDIN).

% Open the output file
outfile(G, PATH) :- usr_output_res(G, success(line(PATH))).
outfile_open(G, PATH, HD) : @fileOutputStream[PATH] = HD :- outfile(G, PATH).

% Write colorings to output file
write_colorings_result(G, R) : @streamWrite[HD, STR] = R :- 
	colorings_xmlstring(G, STR), 
	outfile(G, PATH), 
	outfile_open(G, PATH, HD).

% Close the output file
outfile_closed(G, RES) : @outputStreamClose[STREAM] = RES :- outfile(G, PATH), write_colorings_result(G, success(_)).


	

